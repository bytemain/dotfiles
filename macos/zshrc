export GOENV_ROOT="$HOME/.goenv"
export GOPATH="$HOME/go"
export TIME_STYLE=iso
export CHEAT_CONFIG_PATH="~/dotfiles/cheat/conf.yml"
export CHEAT_USE_FZF=true

#export PATH="$(pwd)/node_modules/.bin:$PATH"
export PATH="/opt/homebrew/bin:$PATH"
export PATH=$NPM_CONFIG_PREFIX/bin:$PATH
export PATH="$HOME/.poetry/bin:$PATH"
export PATH=$PATH:/opt/local/bin
export PATH=$PATH:$GOPATH/bin
export JAVA_HOME="$(/usr/libexec/java_home -v 1.8)"
export PATH=$JAVA_HOME/bin:$PATH
export PATH=$HOME/depot_tools:$PATH
export CPLUS_INCLUDE_PATH=/opt/homebrew/include
export GEM_HOME=$HOME/.gem
export PATH=$GEM_HOME/ruby/3.0.0/bin:$PATH
export PATH="/usr/local/sbin:$PATH"
export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
export PATH="$HOME/.bin:$PATH"
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# alias
alias ls="exa"
alias ll='ls -lh'
alias la='ls -lah'

alias -- -='cd -'

alias o=open
alias md='mkdir -p'
alias mv="mv -v"
alias cp="cp -v"
alias mkdir="mkdir -v"
alias b=brew
alias nv="nvim"
alias y=yarn
alias t=tnpm
alias p=projj
alias py="python3"
alias ipy="ipython"
alias vizsh="nv ~/.zshrc"
alias c="code"
alias cdtmp='mkdir -p ~/0CodeRunner/tmp && cd `mktemp -d ~/0CodeRunner/tmp/artin-XXXXXX`'
alias ws="cd ~/0Workspace"
alias an="cd ~/0Ant"
alias cr="cd ~/0CodeRunner"
alias cls=clear
alias rmrf="rm -rf"
alias rmt="trash"
alias vimrc="nv ~/.config/nvim/init.vim"
alias d=docker
alias dco="docker-compose"
alias ping="nali-ping"
alias dig="nali-dig"
alias traceroute="nali-traceroute"
alias tracepath="nali-tracepath"
alias nslookup="nali-nslookup"
alias top=htop
alias g=git
alias tk=take
alias cg=cargo
alias gcid="git log | head -1 | awk '{print substr(\$2,1,7)}'"
alias src="source ~/.zshrc"
alias cpwd="pwd | pbcopy"
alias bru="bun run"
alias yless="jless --yaml"
alias myip="echo Your ip is; dig +short myip.opendns.com @resolver1.opendns.com;"

alias tl="tmux list-sessions"
alias tks="tmux kill-session -t"
alias ta="tmux attach -t"
alias ts="tmux new-session -s"

alias ct=cheat
alias _='sudo '

alias sv='caddy file-server --listen :2000 --browse'

alias -g dps='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"'
alias -g o='open'
alias -g ow='open -a'


alias -g chrome-no-sec="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome   --disable-web-security  --user-data-dir=~/.chromeTemp"

alias dfimage="docker run -v /var/run/docker.sock:/var/run/docker.sock --rm alpine/dfimage"

alias gl="git log --pretty=format:\"%C(auto)%h %C(magenta)<%ad> %C(green)[%an] %C(blue normal bold)| %Creset%s%C(auto)%d\" --graph --date=short"

alias get_idf='. $HOME/esp2/esp-idf/export.sh'

bindkey -s '\eo'   'cd ..\n'    # 按下ALT+O 就执行 cd .. 命令
bindkey -s '\e;'   'ls -l\n'    # 按下 ALT+; 就执行 ls -l 命令
bindkey '\e[1;3D' backward-word       # ALT+左键：向后跳一个单词
bindkey '\e[1;3C' forward-word        # ALT+右键：前跳一个单词
bindkey '\e[1;3A' beginning-of-line   # ALT+上键：跳到行首
bindkey '\e[1;3B' end-of-line         # ALT+下键：调到行尾

# completion detail
zstyle ':completion:*:complete:-command-:*:*' ignored-patterns '*.pdf|*.exe|*.dll'
zstyle ':completion:*:*sh:*:' tag-order files

# case-insensitive (uppercase from lowercase) completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# process completion
zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=36=31"

gig() { curl -L -s https://www.gitignore.io/api/$@;}

take() {
  mkdir -p $@ && cd ${@:$#}
}

ding() {
    DING_PATH="$HOME/0Workspace/pierced/mac_64"
    command="$DING_PATH/ding -config=$DING_PATH/ding.cfg -subdomain=artin $1"
    eval "$command"
}

add_path() {
    export PATH=$1:$PATH
}

init_npm() {
    npm install --registry=https://registry.npm.alibaba-inc.com -g tnpm
    tnpm install -g nali-cli trash-cli zx yarn
}

zsh_history_fix() {
    mv ~/.zsh_history ~/.zsh_history_bad
    strings ~/.zsh_history_bad > ~/.zsh_history
    fc -R ~/.zsh_history
    rm ~/.zsh_history_bad
}

ss() {
    set -a # automatically export all variables
    source $1
    set +a
}

# Kills a process running on a specified tcp port
killport() {
  for port in "$@"
  do
    lsof -i tcp:$port | awk 'NR!=1 {print $2}' | xargs kill -9
  done
}

# Move and make parent directories
mvp() {
    source="$1"
    target="$2"
    target_dir="$(dirname "$target")"
    mkdir -p $target_dir; mv $source $target
}

touchp() {
    target="$1"
    target_dir="$(dirname "$target")"
    mkdir -p $target_dir; touch $target
}

cleantmp() {
    sudo find /tmp -type f -atime +10 -delete
}

# Proxy configuration
getIp() {
    export PROXY_SOCKS5="socks5://127.0.0.1:7891"
    export PROXY_HTTP="http://127.0.0.1:7890"
}

ip_() {
    getIp
    https --follow -b https://api.ip.sb/geoip/$1
}

proxy_npm() {
    getIp
    npm config set proxy ${PROXY_HTTP}
    npm config set https-proxy ${PROXY_HTTP}
    yarn config set proxy ${PROXY_HTTP}
    yarn config set https-proxy ${PROXY_HTTP}
}

unpro_npm() {
    npm config delete proxy
    npm config delete https-proxy
    yarn config delete proxy
    yarn config delete https-proxy
}

proxy() {
    getIp
    export_proxy
    ip_
}

export_proxy() {
    export https_proxy=${PROXY_HTTP}
    export http_proxy=${PROXY_HTTP}
    export all_proxy=${PROXY_SOCKS5}
}

unpro() {
    unset https_proxy
    unset http_proxy
    unset all_proxy
    ip_
}

flushdns() {
    sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
    sudo killall mDNSResponderHelper
}

docker_deep_clean() {
    echo "Removing exited containers..."
    echo "============================="
    docker ps --filter status=dead --filter status=exited -aq | xargs docker rm -v
    echo ""
    echo "Removing unused images..."
    echo "========================="
    docker images --no-trunc | grep '<none>' | awk '{ print $3 }' | xargs docker rmi
    echo ""
    echo "Removing unused volumes..."
    echo "=========================="
    docker volume ls -qf dangling=true | xargs docker volume rm
    echo ""
    echo "Done."
}
# 备份当前分支到 backup/xxx
git-bk() {
  br=$(git symbolic-ref --short -q HEAD)
  git branch -c "$br" "backup/$br"
}
# 快速添加一颗 worktree
git-wt-add() {
    git worktree add -b $1 ../$1
}
# 软重置
git-rsh() {
  git reset --soft HEAD^
}
# 硬重置
git-rhh() {
  git reset --hard HEAD^
}
# 拿到指定 remote 当前分支的名字
git-cl() {
  branch=$(git ls-remote --symref $1 HEAD | awk '/^ref:/ {sub(/refs\/heads\//, "", $2); print $2}')
  echo $branch
}
docker_clean() {
    docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep $1)
}
ar() {
    mv -i "$@" "$HOME/0Archive/"
}
xattr() {
  sudo xattr -d com.apple.quarantine /Applications/$@
}

bk() {
    cp ~/.zshrc ~/dotfiles/macos/zshrc
    cp ~/.config/nvim/init.vim ~/dotfiles/macos/init.vim
    brew bundle dump --describe --force --no-upgrade --file="~/dotfiles/macos/Brewfile"
    code --list-extensions > ~/dotfiles/_rc/exts.txt
}
upg() {
  zinit self-update
  zinit update
  brew upgrade
}
serv_sfz() {
  sfz . --cors -b 0.0.0.0 -p 3002
}
serv() {
  live-server . --port=8080 --host=0.0.0.0
}

function f() {
  find . -name "$1"
}
function grepf() {
  ll | grep $1
}

# eval "$(pyenv init --path)"
eval "$(goenv init -)"

autoload -U compinit && compinit

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

source $HOME/.config/broot/launcher/bash/br
eval "$(mcfly init zsh)"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

function zshaddhistory() {
    echo "${1%%$'\n'}⋮${PWD}   " >> ~/.zsh_history_ext
}

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
# zinit light zdharma-continuum/fast-syntax-highlighting
zinit light agkozak/zsh-z

# Load pure theme
zinit ice pick"async.zsh" src"pure.zsh" # with zsh-async library that's bundled with it.
zinit light sindresorhus/pure

zinit snippet OMZ::lib/history.zsh
zinit snippet OMZ::lib/git.zsh
zinit snippet OMZ::lib/clipboard.zsh
zinit snippet OMZ::lib/termsupport.zsh


export NVM_AUTOLOAD=1

omz_plugins=(
    git
    npm
    yarn
    sudo
    extract
    nvm
)
for plugin in ${omz_plugins[@]}; do
    zinit snippet OMZP::$plugin
done



# Switching directories for lazy people
setopt autocd
# See: http://zsh.sourceforge.net/Intro/intro_6.html
setopt autopushd pushdminus pushdsilent pushdtohome pushdignoredups

# Disable correction
unsetopt correct_all
unsetopt correct
DISABLE_CORRECTION="true"


if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
##### WHAT YOU WANT TO DISABLE FOR WARP - BELOW

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

##### WHAT YOU WANT TO DISABLE FOR WARP - ABOVE
fi

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

export PATH="/Users/artin/.detaspace/bin:$PATH"
